leaflet() %>%
addTiles() %>%
addMarkers()
manyLabels<-c("Canton, MI, US", "Flushing, NY, US", "Lorton, VA, US",
"O'Hare Airport, IL, US")
df <- data.frame(lat=c(42.34034,40.758977,38.665159,41.977),
lng=c(-83.5206,-73.829978,-77.250536,-87.907))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = manyLabels)
dfWMATA <- data.frame(lat = runif(20, min = 38.76, max = 39.12),
lng = runif(20, min = -77.50, max = -76.84))
dfWMATA %>%
leaflet() %>%
addTiles() %>%
addMarkers()
manyLabels<-c("Canton, MI, US", "Flushing, NY, US", "Lorton, VA, US",
"O'Hare Airport, IL, US")
dfTravel <- data.frame(lat=c(42.34034,40.758977,38.665159,41.977),
lng=c(-83.5206,-73.829978,-77.250536,-87.907))
dfTravel %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = manyLabels)
manyLabels<-c("Canton, MI, US", "Flushing, NY, US", "Lorton, VA, US",
"O'Hare Airport, IL, US")
dfTravel <- data.frame(lat=c(42.34034,40.758977,38.665159,41.977),
lng=c(-83.5206,-73.829978,-77.250536,-87.907))
dfTravel %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = manyLabels)
manyLabels<-c("Canton, MI, US", "Flushing, NY, US", "Lorton, VA, US",
"O'Hare Airport, IL, US")
dfTravel <- data.frame(lat=c(42.34034,40.758977,38.665159,41.977),
lng=c(-83.5206,-73.829978,-77.250536,-87.907))
dfTravel %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = manyLabels)
hopkinsIcon <- makeIcon(
iconUrl = "https://upload.wikimedia.org/wikipedia/en/f/fb/Johns_Hopkins_University_logo.svg",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
hopkinsLatLong <- data.frame(
lat = c(39.2973166, 39.3288851, 39.2906617),
lng = c(-76.5929798, -76.6206598, -76.5469683))
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers() #icon = hopkinsIcon)
hopkinsIcon <- makeIcon(
iconUrl = "http://brand.jhu.edu/content/uploads/2014/06/university.shield.small_.blue_.png", # dead link
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
hopkinsLatLong <- data.frame(
lat = c(39.2973166, 39.3288851, 39.2906617, 39.2970681, 39.2824806),
lng = c(-76.5929798, -76.6206598, -76.5469683, -76.6150537, -76.6016766))
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon)
hopkinsSites <- c(
"<a href='http://www.jhsph.edu/'>East Baltimore Campus</a>",
"<a href='https://apply.jhu.edu/visit/homewood/'>Homewood Campus</a>",
"<a href='http://www.hopkinsmedicine.org/johns_hopkins_bayview/'>Bayview Medical Center</a>",
"<a href='http://www.peabody.jhu.edu/'>Peabody Institute</a>",
"<a href='http://carey.jhu.edu/'>Carey Business School</a>"
)
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon, popup = hopkinsSites)
df <- data.frame(lat = runif(500, min = 39.25, max = 39.35),
lng = runif(500, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville",
"Gaithersburg","Bowie", "Hagerstown",
"Annapolis", "College Park", "Salisbury",
"Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,
39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434,
39.0068, 39.6418, 38.9784, 38.9897, 38.3607,
39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014,
-76.7791, -77.7200, -76.4922, -76.9378,
-75.5994, -76.8483))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)
leaflet() %>%
addTiles() %>%
addRectangles(lat1 = 37.3858, lng1 = -122.0595,
lat2 = 37.3890, lng2 = -122.0625)
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55),
col = sample(c("red", "blue", "green"), 20, replace = TRUE),
stringsAsFactors = FALSE)
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(color = df$col) %>%
addLegend(labels = LETTERS[1:3], colors = c("blue", "red", "green"))
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=22.144744, lng=113.564527,
popup="Sands Cotai")
library(leaflet)
my_map <- leaflet() %>%
addTiles() # add data from OSM
my_map
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=22.144744, lng=113.564527,
popup="Sands Cotai")
my_map
quakes
hist(quakes$lat)
hist(quakes$long)
?json
?rjson
fromJSON("https://api.wmata.com/Rail.svc/json/jStations?RD")
library(jsonlite)
fromJSON("https://api.wmata.com/Rail.svc/json/jStations?RD")
fromJSON("https://api.wmata.com/Rail.svc/json/jStations")
?fromJSON
fromJSON("https://api.wmata.com/Rail.svc/json/jStations?RD&key=f2fc683dc4784c2196ecd8f322a23f81")
?jsonlite::GET
?jsonlite:GET
library(httr)
?httr:GET
?httr::GET
py_available()
install.packages("reticulate")
library(reticulate)
py_available()
library(knitr)
library(readtext)
library(dplyr)
opts_knit$set(root.dir="D:/Card statements")
getYM<-function(fileName)	{
dateRegex<-paste("[1-9]{1}[[:digit:]]{3}[0-1]{1}[[:digit:]]{1}[0-3]{1}",
"[[:digit:]]{1}",
sep="")
stopifnot(grepl(dateRegex, fileName))
fileDate<-regmatches(fileName,
regexpr(dateRegex, fileName))
return(list(stYear=as.integer(substr(fileDate, 1, 4)),
stMonth=as.integer(substr(fileDate, 5, 6))
))
#	return(as.integer(substr(fileDate, 1, 4)))
}
# opts_knit$set(root.dir="D:/Card statements/Citi")
tyPremierDir<-"Citi/ThankYou Premier_WorldElite MasterCard_1065/"
doubleCashDir<-"Citi/DoubleCash_MasterCard_9945/"
rmExtraSpaces<-function(str)	{
firstLine<-unlist(strsplit(str, "\n"))[1]
spaces<-unlist(strsplit(firstLine, " "))
fSpaces<-Filter(function(str) nchar(str) > 0, spaces)
return(paste(fSpaces, collapse=" "))
}
# isNewInterface TRUE for Jul 2018 and beyond
processCitiCSV<-function(rootDir, fn, isNewInterface=TRUE)	{
fullName<-paste(rootDir, fn, sep="")
# fn<-paste(tyPremierDir,
#           "Transactions ending_20180323",
#           tyPremierTail,
#           sep="")
initialDF<-read.csv(fullName,header=TRUE,stringsAsFactors=FALSE)
cleanedDesc<-unlist(lapply(seq(nrow(initialDF)),
function(k) rmExtraSpaces(
initialDF$Description[k])
)
)
if(isNewInterface)  {
initialDF<-initialDF %>%
mutate(Amt=ifelse(is.na(Debit), Credit, Debit))
}
else  {
initialDF<-initialDF %>%
mutate(Amt=ifelse(is.na(Debit), Credit, Debit))
}
res<-data.frame(Date=as.Date(initialDF$Date, format="%m/%d/%Y"),
Desc=cleanedDesc,
Amount=unlist(initialDF %>% select(Amt)))
row.names(res)<-NULL
write.csv(res,
paste("Citi/Processed files/",
"Processed ",
fn,
sep=""),
row.names=FALSE)
return(0)
}
tyPremierTail<-"_Citi_ThankYouPremier_WorldEliteMastercard_1065.csv"
doubleCashTail<-"_Citi_DoubleCash_Mastercard_9945.csv"
processCitiCSV(tyPremierDir,
paste("Transactions ending_20180823",
tyPremierTail,
sep=""))
# processCitiCSV(doubleCashDir,
#                paste("Transactions ending_20180725",
#                      doubleCashTail,
#                      sep=""))
library(knitr)
library(readtext)
library(dplyr)
opts_knit$set(root.dir="D:/Card statements")
getYM<-function(fileName)	{
dateRegex<-paste("[1-9]{1}[[:digit:]]{3}[0-1]{1}[[:digit:]]{1}[0-3]{1}",
"[[:digit:]]{1}",
sep="")
stopifnot(grepl(dateRegex, fileName))
fileDate<-regmatches(fileName,
regexpr(dateRegex, fileName))
return(list(stYear=as.integer(substr(fileDate, 1, 4)),
stMonth=as.integer(substr(fileDate, 5, 6))
))
#	return(as.integer(substr(fileDate, 1, 4)))
}
extractFieldsChase<-function(txt)	{
txt<-gsub("([[:digit:]]+)\\,([[:digit:]])", "\\1\\2", txt)
dateRegex<-"[0-1]{1}[[:digit:]]{1}\\/[0-3]{1}[[:digit:]]{1}"
amtRegex<-"\\-?[[:digit:]]*\\.[[:digit:]]{2}"
stopifnot(grepl(dateRegex,txt))
stopifnot(grepl(amtRegex,txt))
amtMatchObj<-regexpr(amtRegex,txt)
return(data.frame(MMDD=regmatches(txt, regexpr(dateRegex,txt)),
Desc=substr(txt,
7,
amtMatchObj[1]-2),
Amt=as.numeric(regmatches(txt, amtMatchObj))
))
}
processLinesChase<-function(dir)	{
df_txt<-readtext(dir)
processMonth<-function(k)  {
stYM<-getYM(df_txt$doc_id[k])
lines<-unlist(strsplit(df_txt$text[k], "\n"))
res<-do.call(rbind,
lapply(seq(length(lines)),
function(j)
extractFieldsChase(lines[j]))
)
res<-res %>%
mutate(Month=as.integer(substr(MMDD,1,2))) %>%
mutate(TransactionDate=
as.Date(paste(ifelse(stYM$stMonth==1 &
Month==12,
stYM$stYear-1,
stYM$stYear),
substr(MMDD,1,2),
substr(MMDD,4,5),
sep="-")),
Statement=k) %>%
select(Statement,TransactionDate, Desc, Amt)
return(res)
}
return(
do.call(rbind,
lapply(seq(nrow(df_txt)),
processMonth))
)
}
folderUA<-"Chase/United MileagePlus Explorer_Visa Signature 1598/"
mpeDF<-processLinesChase(paste(folderUA,
"TXT reductions/*",
sep=""))
csp_cfDF<-processLinesChase(paste("Chase/Freedom",
"_Visa Signature 3696/TXT reductions/*",
sep=""))
hyattDF<-processLinesChase("Chase/Hyatt_Visa Signature 3206/TXT reductions/*")
write.csv(mpeDF,
paste("Combined transactions Chase_United MileagePlus Explorer",
"_Visa Signature 1598.csv",
sep=""),
row.names=FALSE)
write.csv(csp_cfDF,
paste("Combined transactions Chase_Freedom (formerly ",
"Sapphire Preferred)",
"_Visa Signature 3696.csv",
sep=""),
row.names=FALSE)
write.csv(hyattDF,
"Combined transactions Hyatt_Visa Signature 3206.csv",
row.names=FALSE)
library(knitr)
library(readtext)
library(dplyr)
opts_knit$set(root.dir="D:/Card statements")
getYM<-function(fileName)	{
dateRegex<-paste("[1-9]{1}[[:digit:]]{3}[0-1]{1}[[:digit:]]{1}[0-3]{1}",
"[[:digit:]]{1}",
sep="")
stopifnot(grepl(dateRegex, fileName))
fileDate<-regmatches(fileName,
regexpr(dateRegex, fileName))
return(list(stYear=as.integer(substr(fileDate, 1, 4)),
stMonth=as.integer(substr(fileDate, 5, 6))
))
#	return(as.integer(substr(fileDate, 1, 4)))
}
extractFieldsBoA<-function(txt) {#, isCashRewards)	{
# txt<-
dateRegex<-"[0-1]{1}[[:digit:]]{1}\\/[0-3]{1}[[:digit:]]{1}"
amtRegex<-"\\-?[[:digit:]]*\\.[[:digit:]]{2}"
codeRegex<-"([[:digit:]]{2}[A-Z0-9]{2})? ([[:digit:]]{4}|(Virtual Card)){1}"
stopifnot(grepl(paste(dateRegex,
dateRegex,
sep=" "),
txt))
stopifnot(grepl(amtRegex,txt))
stopifnot(grepl(codeRegex,txt))
# txt<-gsub(",","",txt)
decodedTxt<-gsub(codeRegex,"",txt)
decodedTxt<-gsub("([[:digit:]]+)\\,([[:digit:]])", "\\1\\2", decodedTxt)
dateMatchesObj<-gregexpr(dateRegex,decodedTxt)
stopifnot(length(dateMatchesObj[[1]])==2)
dateMatches<-unlist(regmatches(decodedTxt, dateMatchesObj))
txtDesc<-gsub(amtRegex,"",
gsub(dateRegex,"",decodedTxt))
return(data.frame(TransMMDD=dateMatches[1],
PostMMDD=dateMatches[2],
Desc=trimws(txtDesc),
Amt=as.numeric(regmatches(decodedTxt,
gregexpr(amtRegex, decodedTxt)
)
)
))
}
processLinesBoA<-function(dir)	{
# dir<-paste("Bank of America/Better Balance Rewards",
#                            "_MasterCard_4469/TXT reductions/*",
#                            sep="")
df_txt<-readtext(dir)
processMonth<-function(k)  {
stYM<-getYM(df_txt$doc_id[k])
lines<-unlist(strsplit(df_txt$text[k], "\n"))
res<-do.call(rbind,
lapply(seq(length(lines)),
function(j)
extractFieldsBoA(lines[j]))
)
fullDate<-function(str)	{
stopifnot(grepl("[0-1]{1}[[:digit:]]{1}\\/[0-3]{1}[[:digit:]]{1}",
str))
month<-substr(str,1,2)
return(
as.Date(paste(ifelse(stYM$stMonth==1 &
month==12,
stYM$stYear-1,
stYM$stYear),
month,
substr(str,4,5),
sep="-"))
)
}
res<-res %>%
mutate(TransactionDate=fullDate(TransMMDD),
PostDate=fullDate(PostMMDD),
Statement=k) %>%
select(Statement,TransactionDate, PostDate, Desc, Amt)
return(res)
}
return(
do.call(rbind,
lapply(seq(nrow(df_txt)),
processMonth))
)
}
crDF<-processLinesBoA(paste("Bank of America/Cash Rewards_Visa Signature_7509",
"/TXT reductions/*",
sep=""))
# bbrDF<-processLinesBoA(paste("Bank of America/Better Balance Rewards",
#                              "_MasterCard_4469/TXT reductions/*",
#                              sep=""))
write.csv(crDF,
paste("Combined transactions BoA_Cash Rewards_Visa Signature_",
"7509.csv",
sep=""),
row.names=FALSE)
# write.csv(bbrDF,
#           paste("Combined transactions BoA_Better Balance Rewards_MasterCard_",
#                 "4469.csv",
#                 sep=""),
#           row.names=FALSE)
library(plotly)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~factor(cyl))
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~disp)
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp)
set.seed(2016-07-21)
temp <- rnorm(100, mean = 30, sd = 5)
pressue <- rnorm(100)
dtime <- 1:100
plot_ly(x = ~temp, y = ~pressue, z = ~dtime,
type = "scatter3d", color = ~temp)
data("airmiles")
plot_ly(x = ~time(airmiles), y = ~airmiles, type = "scatter", mode = "lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
plot_ly(x = ~precip, type = "histogram")
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
terrain1 <- matrix(rnorm(100*100), nrow = 100, ncol = 100)
plot_ly(z = ~terrain1, type = "heatmap")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = ~terrain2, type = "surface")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = ~terrain2, type = "surface")
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
plot
_ly (
type = 'scattergeo' ,
lon =
c( 42, 39 ) ,
lat =
c( 12, 22 ) ,
text =
c( 'one' , 'two' ) ,
mode = 'markers' )
plot_ly (
type = 'scattergeo' ,
lon =
c( 42, 39 ) ,
lat =
c( 12, 22 ) ,
text =
c( 'one' , 'two' ) ,
mode = 'markers' )
plot_ly (
type = 'scattergeo' ,
lat =
c( 42, 39 ) ,
lon =
c( 12, 22 ) ,
text =
c( 'one' , 'two' ) ,
mode = 'markers' )
?volcano
?plot_ly
plot_ly (
type = 'scattergeo' ,
lat =
c( 38.909, 38.86 ) ,
lon =
c( -77.549, -77.04 ) ,
text =
c( 'one' , 'two' ) ,
mode = 'markers' )
plot_ly(type = 'heatmap', z=volcano)
shiny::runApp('C:/HY/Coursera/DS/9 Developing Data Products/Examples/Shiny Part I/Interactive_scatter')
runApp('C:/HY/Coursera/DS/9 Developing Data Products/Examples/Shiny Part II/Girth_interactive')
runApp('C:/HY/Coursera/DS/9 Developing Data Products/Week 2 Leaflet/Metrorail_stations_by_opening_time')
setwd("C:/HY/Coursera/DS/9 Developing Data Products/Week 2 Leaflet/Metrorail shiny presentation")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
runDeck()
install.packages("XML")
runDeck()
runDeck()
runDeck()
runDeck()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
