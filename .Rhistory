geom_point(alpha=0.7, show.legend = F) +
scale_colour_manual(values = country_colors) +
scale_size(range=c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# gganimate functions
labs(title='Year: {frame_time}', x='GDP per capita',
y='Life expectancy') +
transition_time(year) +
ease_aes('linear')
library(correlationfunnel)
install.packages("correlationfunnel")
install.packages("MASS")
install.packages("H2O")
install.packages("h2o")
install.packages("parsnip")
require(knitr)
library(R.utils); library(data.table); library(tidyverse);
library(reshape2); library(ggplot2); library(lubridate)
# library(plyr)
opts_chunk$set(echo = TRUE)
opts_knit$set(root.dir=paste("C:/HY/Coursera/DS/5 Reproducible Research",
"Project 2-with data table", sep="/"))
urlData<-paste("https://d396qusza40orc.cloudfront.net/repdata%2Fdata",
"%2FStormData.csv.bz2",sep="")
# download.file(urlData, "StormData.csv.bz2")
## Calling unzip will produce an error
stormData<-fread("StormData.csv.bz2")
toMultiplier<-function(x) {
return(case_when(x %in% c("","-","?") ~ 0,
x == "+" ~ 1,
x %in% as.character(seq(0,8)) ~ 10,
toupper(x) == "H" ~ 100,
toupper(x) == "K" ~ 1E3,
toupper(x) == "M" ~ 1E6,
toupper(x) == "B" ~ 1E9,
TRUE ~ as.numeric(NA)))
}
# stormData[,"REMARKS"]
stormData[,PROPDMGEXP:=as.factor(PROPDMGEXP)]
stormData[,BGN_DATE:=as.Date(BGN_DATE, "%m/%d/%Y")]
stormData[,REMARKS:=as.character(REMARKS)]
setnames(stormData, "F", "FujitaRating")
# stormData[,"F":=NULL]
levels(stormData$PROPDMGEXP)
stormData[,MultPropDmg:=toMultiplier(PROPDMGEXP)]
stormData[,MultCropDmg:=toMultiplier(CROPDMGEXP)]
stormData[,ActualPropDmg:=MultPropDmg * PROPDMG]
stormData[,ActualCropDmg:=MultCropDmg * CROPDMG]
stormData[,TotalDmg:=ActualPropDmg+ActualCropDmg]
parkColoradoHail<-stormData[PROPDMG != 0 & PROPDMGEXP == as.character(0) &
BGN_DATE==as.Date("1994-08-04") &
STATE=="CO" & COUNTYNAME=="PARK" & EVTYPE=="HAIL"]
stormData[,EVTYPE:=toupper(trimws(as.character(EVTYPE)))]
stormData[,EVTYPE:=gsub("/ ","", EVTYPE)]
stormData[,FujitaRating:=ifelse(grepl("F[0-5]", EVTYPE),
as.integer(str_extract(EVTYPE,"[0-5]")),
FujitaRating)]
unique(unlist(stormData[!is.na(FujitaRating),EVTYPE]))
## should be equivalent to
unique(unlist(stormData %>%
filter(!is.na(FujitaRating)) %>%
select(EVTYPE)))
nonTornadicFujitas<-stormData[!is.na(FujitaRating) &
EVTYPE %in% c("HEAVY RAIN","TSTM WIND")]
# nonTornadicFujitas<-stormData %>%
#   filter(!is.na(FujitaRating) & EVTYPE %in% c("HEAVY RAIN","TSTM WIND"))
table(nonTornadicFujitas$EVTYPE)
wordTstm<-"THU|TSTM"
tStmRegex<-paste("^(",
wordTstm,
"|(SEV(.)+(",
wordTstm,
"))|(GU(.)+(",
wordTstm,
")))",
sep=""
)
nominalTstm<-stormData[grepl(tStmRegex,EVTYPE)]
# nominalTstm<-stormData %>% filter(grepl(tStmRegex,EVTYPE))
stormData<-stormData[,typeEvent:=ifelse(!is.na(FujitaRating),
"Tornado",
as.character(NA))]
# stormData<-stormData %>% mutate(typeEvent=ifelse(!is.na(FujitaRating),
#                                                  "Tornado",
#                                                  as.character(NA)))
nonFujitaTorn<-stormData[is.na(FujitaRating) & grepl("TORN", EVTYPE)]
unique(nonFujitaTorn$EVTYPE)
centuryStorm<-stormData[grepl("TORN(.)+TSTM", EVTYPE)]
csType<-unlist(centuryStorm$EVTYPE)
print(unlist(centuryStorm$REMARKS))
idxCentury<-which(stormData$EVTYPE==csType)
idxNonFujita<-setdiff(which(is.na(stormData$FujitaRating) &
grepl("TORN", stormData$EVTYPE)),
idxCentury)
stormData$typeEvent[idxNonFujita]<-"Tornado"
stormData$typeEvent[idxCentury]<-"Thunderstorm Wind"
tStmRegex
stormData<-stormData[,typeEvent:=
ifelse(!is.na(typeEvent),
typeEvent,
case_when(
grepl("(^FLASH)|(FLOOD(.){1}FLASH)",EVTYPE)
| grepl("( FLASH FLOOD)$",EVTYPE) ~
"Flash Flood",
grepl("FLOOD|FLD",EVTYPE) &
!grepl("(FLASH|COAST|BEACH|EROSION|THU)",
EVTYPE) ~
"Flood",
grepl("(COAST|BEACH|EROSION)",EVTYPE) &
!grepl("SURGE",EVTYPE) ~
"Coastal Flood",
grepl("SURGE",EVTYPE) ~
"Storm Surge/Tide",
grepl(tStmRegex,EVTYPE) ~
"Thunderstorm Wind",
grepl(paste("^(MAR(.)+(",
wordTstm,
"))",
sep=""),EVTYPE) ~
"Marine Thunderstorm Wind",
grepl("HUR|TYP",EVTYPE) ~
"Hurricane (Typhoon)",
grepl("TROP",EVTYPE) ~
"Tropical Storm or Depression",
grepl("(?=.*\\bWATERSP)(?!.*TORN)",
EVTYPE,
perl=TRUE) ~
"Waterspout",
TRUE ~ as.character(NA)
)
)
]
stormData<-stormData[,typeEvent:=
ifelse(!is.na(typeEvent),
typeEvent,
case_when(
grepl("(^HAIL)|( HAIL$)",EVTYPE) &
!grepl("MAR",EVTYPE) ~
"Hail",
grepl("^((GU|HI|STRO)(.)+WIND)",EVTYPE) ~
"High or Strong Wind",
grepl("^(MAR(.)+WIND)",EVTYPE)~
"Marine High or Strong Wind",
grepl("^AST(.)+LO",EVTYPE)~
"Astronomical Low Tide",
grepl("^AVA",EVTYPE)~
"Avalanche",
grepl("^BLI",EVTYPE)~
"Blizzard",
grepl("LAK(.)+SN",EVTYPE)~
"Lake-Effect Snow",
grepl("^HEA(.)+SN",EVTYPE) &
!grepl("LAK",EVTYPE)~
"Heavy Snow",
grepl("FROST|FREEZE",EVTYPE) ~
"Frost/Freeze",
TRUE ~ as.character(NA)
)
)
]
stormData<-stormData[,typeEvent:=
ifelse(!is.na(typeEvent),
typeEvent,
case_when(
grepl(paste("(^COLD)|(COLD$)",
"|(WIND(.)?CHILL)",
sep=""),
EVTYPE) &
!grepl("AIR",EVTYPE)~
"Extreme Cold/Wind Chill",
grepl(paste("(^([^/]*HEAT))",
"|(REC(.)+HEAT)",
sep=""),EVTYPE)~
"Excessive Heat",
grepl("WIL",EVTYPE)~
"Wildfire",
grepl("^DROU",EVTYPE)~
"Drought",
grepl("(^DUST)|(DUST$)",EVTYPE)~
"Dust Devil or Storm",
grepl("^HEAVY RA",EVTYPE)~
"Heavy Rain",
grepl("^LIGHTN",EVTYPE)~
"Lightning",
grepl("VOL",EVTYPE)~
"Volcanic Ash",
grepl("WIL",EVTYPE)~
"Volcanic Ash",
grepl("WINT(.)+(MIX|WEA)",EVTYPE)~
"Other Wintry Weather",
grepl("^WINT(.)+ST",EVTYPE)~
"Winter Storm",
grepl("FUN",EVTYPE)~
"Funnel Cloud",
grepl("TSU",EVTYPE)~
"Tsunami",
grepl("RIP|SURF",EVTYPE)~
"Rip Current",
TRUE ~ as.character(NA)
)
)
]
stormData<-stormData[,typeEvent:=
ifelse(!is.na(typeEvent),
typeEvent,
case_when(grepl("(FR(.)+RAIN)|SLE|(ICE ST)",
EVTYPE)~
"Ice Storm or Sleet",
grepl("FR(.)+ING",EVTYPE) &
!grepl("(RAIN)|(FOG)",EVTYPE)~
"Other Wintry Weather",
grepl("FOG",EVTYPE)~
"Dense Fog",
grepl("SMO",EVTYPE)~
"Dense Smoke",
TRUE ~ as.character(NA)
))
]
library(knitr); library(readtext); library(dplyr); library(stringr)
opts_knit$set(root.dir="D:/Card statements")
getYM<-function(fileName)	{
dateRegex<-paste("[1-9]{1}[[:digit:]]{3}[0-1]{1}[[:digit:]]{1}[0-3]{1}",
"[[:digit:]]{1}",
sep="")
stopifnot(grepl(dateRegex, fileName))
fileDate<-regmatches(fileName,
regexpr(dateRegex, fileName))
return(list(stYear=as.integer(substr(fileDate, 1, 4)),
stMonth=as.integer(substr(fileDate, 5, 6))
))
#	return(as.integer(substr(fileDate, 1, 4)))
}
library(knitr); library(readtext); library(dplyr); library(stringr)
opts_knit$set(root.dir="D:/Card statements")
getYM<-function(fileName)	{
dateRegex<-paste("[1-9]{1}[[:digit:]]{3}[0-1]{1}[[:digit:]]{1}[0-3]{1}",
"[[:digit:]]{1}",
sep="")
stopifnot(grepl(dateRegex, fileName))
fileDate<-regmatches(fileName,
regexpr(dateRegex, fileName))
return(list(stYear=as.integer(substr(fileDate, 1, 4)),
stMonth=as.integer(substr(fileDate, 5, 6))
))
#	return(as.integer(substr(fileDate, 1, 4)))
}
# opts_knit$set(root.dir="D:/Card statements/Citi")
tyPremierDir<-"Citi/ThankYou Premier_WorldElite MasterCard_1065/"
tyPreferredDir<-"Citi/ThankYou Preferred_World Mastercard_4460/"
doubleCashDir<-"Citi/DoubleCash_MasterCard_9945/"
rmExtraSpaces<-function(str)	{
firstLine<-unlist(strsplit(str, "\n"))[1]
spaces<-unlist(strsplit(firstLine, " "))
fSpaces<-Filter(function(str) nchar(str) > 0, spaces)
return(paste(fSpaces, collapse=" "))
}
processLinesCiti<-function(dir)	{
# dir<-"Citi/DoubleCash_MasterCard_9945/"
allFiles<-list.files(dir)
allCSV<-Filter(function(x) grepl("\\.csv$", x, ignore.case = T),
allFiles)
processFileCiti<-function(fn)	{
# fn<-allCSV[length(allCSV)]
fullName<-paste(dir, fn, sep="")
initialDF<-read.csv(fullName,header=TRUE,stringsAsFactors=FALSE)
cleanedDesc<-unlist(lapply(seq(nrow(initialDF)),
function(k) rmExtraSpaces(
initialDF$Description[k])
)
)
initialDF<-initialDF %>%
mutate(Amt=ifelse(is.na(Debit), Credit, Debit))
res<-data.frame(Date=as.Date(initialDF$Date, format="%m/%d/%Y"),
Desc=cleanedDesc,
Amount=unlist(initialDF %>% select(Amt)))
row.names(res)<-NULL
res<-res %>% arrange(Date)
dateRegex<-paste("[1-9]{1}[[:digit:]]{3}[0-1]{1}[[:digit:]]{1}[0-3]{1}",
"[[:digit:]]{1}",
sep="")
closingDate<-str_extract(fn, dateRegex)
res$Month<-paste(substr(closingDate, 1, 4),
substr(closingDate, 5, 6), sep="-")
res<-res %>% select(Month, Date, Desc, Amount)
return(res)
}
allDFs<-lapply(allCSV, processFileCiti)
combinedRes<-do.call(rbind, allDFs)
return(combinedRes)
}
dfs_ty_prem<-processLinesCiti(tyPremierDir)
dfs_doublecash<-processLinesCiti(doubleCashDir)
write.csv(dfs_ty_prem,
paste("Citi/Processed transactions",
"_Citi_ThankYouPremier_WorldEliteMastercard_1065.csv",
sep=""),
row.names = F)
write.csv(dfs_doublecash,
paste("Citi/Processed transactions",
"_Citi_DoubleCash_Mastercard_9945.csv",
sep=""),
row.names = F)
# tyPreferredTail<-"_Citi_ThankYouPreferred_WorldMastercard_4460.csv"
# tyPremierTail<-"_Citi_ThankYouPremier_WorldEliteMastercard_1065.csv"
# doubleCashTail<-"_Citi_DoubleCash_Mastercard_9945.csv"
extractFieldsChase<-function(txt)	{
txt<-gsub("([[:digit:]]+)\\,([[:digit:]])", "\\1\\2", txt)
dateRegex<-"[0-1]{1}[[:digit:]]{1}\\/[0-3]{1}[[:digit:]]{1}"
amtRegex<-"\\-?[[:digit:]]*\\.[[:digit:]]{2}"
stopifnot(grepl(dateRegex,txt))
stopifnot(grepl(amtRegex,txt))
amtMatchObj<-regexpr(amtRegex,txt)
return(data.frame(MMDD=regmatches(txt, regexpr(dateRegex,txt)),
Desc=substr(txt,
7,
amtMatchObj[1]-2),
Amt=as.numeric(regmatches(txt, amtMatchObj))
))
}
processLinesChase<-function(dir)	{
df_txt<-readtext(dir)
processMonth<-function(k)  {
stYM<-getYM(df_txt$doc_id[k])
lines<-unlist(strsplit(df_txt$text[k], "\n"))
res<-do.call(rbind,
lapply(seq(length(lines)),
function(j)
extractFieldsChase(lines[j]))
)
res<-res %>%
mutate(Month=as.integer(substr(MMDD,1,2))) %>%
mutate(TransactionDate=
as.Date(paste(ifelse(stYM$stMonth==1 &
Month==12,
stYM$stYear-1,
stYM$stYear),
substr(MMDD,1,2),
substr(MMDD,4,5),
sep="-")),
Statement=k) %>%
select(Statement,TransactionDate, Desc, Amt)
return(res)
}
return(
do.call(rbind,
lapply(seq(nrow(df_txt)),
processMonth))
)
}
folderUA<-"Chase/United MileagePlus Explorer_Visa Signature 1598/"
mpeDF<-processLinesChase(paste(folderUA,
"TXT reductions/*",
sep=""))
csp_cfDF<-processLinesChase(paste("Chase/Freedom",
"_Visa Signature 3696/TXT reductions/*",
sep=""))
hyattDF<-processLinesChase("Chase/Hyatt_Visa Signature 3206/TXT reductions/*")
write.csv(mpeDF,
paste("Combined transactions Chase_United MileagePlus Explorer",
"_Visa Signature 1598.csv",
sep=""),
row.names=FALSE)
write.csv(csp_cfDF,
paste("Combined transactions Chase_Freedom (formerly ",
"Sapphire Preferred)",
"_Visa Signature 3696.csv",
sep=""),
row.names=FALSE)
write.csv(hyattDF,
"Combined transactions Hyatt_Visa Signature 3206.csv",
row.names=FALSE)
extractFieldsChase<-function(txt)	{
txt<-gsub("([[:digit:]]+)\\,([[:digit:]])", "\\1\\2", txt)
dateRegex<-"[0-1]{1}[[:digit:]]{1}\\/[0-3]{1}[[:digit:]]{1}"
amtRegex<-"\\-?[[:digit:]]*\\.[[:digit:]]{2}"
stopifnot(grepl(dateRegex,txt))
stopifnot(grepl(amtRegex,txt))
amtMatchObj<-regexpr(amtRegex,txt)
return(data.frame(MMDD=regmatches(txt, regexpr(dateRegex,txt)),
Desc=substr(txt,
7,
amtMatchObj[1]-2),
Amt=as.numeric(regmatches(txt, amtMatchObj))
))
}
processLinesChase<-function(dir)	{
df_txt<-readtext(dir)
processMonth<-function(k)  {
stYM<-getYM(df_txt$doc_id[k])
lines<-unlist(strsplit(df_txt$text[k], "\n"))
res<-do.call(rbind,
lapply(seq(length(lines)),
function(j)
extractFieldsChase(lines[j]))
)
res<-res %>%
mutate(Month=as.integer(substr(MMDD,1,2))) %>%
mutate(TransactionDate=
as.Date(paste(ifelse(stYM$stMonth==1 &
Month==12,
stYM$stYear-1,
stYM$stYear),
substr(MMDD,1,2),
substr(MMDD,4,5),
sep="-")),
Statement=k) %>%
select(Statement,TransactionDate, Desc, Amt)
return(res)
}
return(
do.call(rbind,
lapply(seq(nrow(df_txt)),
processMonth))
)
}
folderUA<-"Chase/United MileagePlus Explorer_Visa Signature 1598/"
mpeDF<-processLinesChase(paste(folderUA,
"TXT reductions/*",
sep=""))
csp_cfDF<-processLinesChase(paste("Chase/Freedom",
"_Visa Signature 3696/TXT reductions/*",
sep=""))
hyattDF<-processLinesChase("Chase/Hyatt_Visa Signature 3206/TXT reductions/*")
write.csv(mpeDF,
paste("Combined transactions Chase_United MileagePlus Explorer",
"_Visa Signature 1598.csv",
sep=""),
row.names=FALSE)
write.csv(csp_cfDF,
paste("Combined transactions Chase_Freedom (formerly ",
"Sapphire Preferred)",
"_Visa Signature 3696.csv",
sep=""),
row.names=FALSE)
write.csv(hyattDF,
"Combined transactions Hyatt_Visa Signature 3206.csv",
row.names=FALSE)
library(knitr); library(readtext); library(dplyr); library(stringr)
opts_knit$set(root.dir="D:/Card statements")
getYM<-function(fileName)	{
dateRegex<-paste("[1-9]{1}[[:digit:]]{3}[0-1]{1}[[:digit:]]{1}[0-3]{1}",
"[[:digit:]]{1}",
sep="")
stopifnot(grepl(dateRegex, fileName))
fileDate<-regmatches(fileName,
regexpr(dateRegex, fileName))
return(list(stYear=as.integer(substr(fileDate, 1, 4)),
stMonth=as.integer(substr(fileDate, 5, 6))
))
#	return(as.integer(substr(fileDate, 1, 4)))
}
# opts_knit$set(root.dir="D:/Card statements/Citi")
tyPremierDir<-"Citi/ThankYou Premier_WorldElite MasterCard_1065/"
tyPreferredDir<-"Citi/ThankYou Preferred_World Mastercard_4460/"
doubleCashDir<-"Citi/DoubleCash_MasterCard_9945/"
rmExtraSpaces<-function(str)	{
firstLine<-unlist(strsplit(str, "\n"))[1]
spaces<-unlist(strsplit(firstLine, " "))
fSpaces<-Filter(function(str) nchar(str) > 0, spaces)
return(paste(fSpaces, collapse=" "))
}
processLinesCiti<-function(dir)	{
# dir<-"Citi/DoubleCash_MasterCard_9945/"
allFiles<-list.files(dir)
allCSV<-Filter(function(x) grepl("\\.csv$", x, ignore.case = T),
allFiles)
processFileCiti<-function(fn)	{
# fn<-allCSV[length(allCSV)]
fullName<-paste(dir, fn, sep="")
initialDF<-read.csv(fullName,header=TRUE,stringsAsFactors=FALSE)
cleanedDesc<-unlist(lapply(seq(nrow(initialDF)),
function(k) rmExtraSpaces(
initialDF$Description[k])
)
)
initialDF<-initialDF %>%
mutate(Amt=ifelse(is.na(Debit), Credit, Debit))
res<-data.frame(Date=as.Date(initialDF$Date, format="%m/%d/%Y"),
Desc=cleanedDesc,
Amount=unlist(initialDF %>% select(Amt)))
row.names(res)<-NULL
res<-res %>% arrange(Date)
dateRegex<-paste("[1-9]{1}[[:digit:]]{3}[0-1]{1}[[:digit:]]{1}[0-3]{1}",
"[[:digit:]]{1}",
sep="")
closingDate<-str_extract(fn, dateRegex)
res$Month<-paste(substr(closingDate, 1, 4),
substr(closingDate, 5, 6), sep="-")
res<-res %>% select(Month, Date, Desc, Amount)
return(res)
}
allDFs<-lapply(allCSV, processFileCiti)
combinedRes<-do.call(rbind, allDFs)
return(combinedRes)
}
dfs_ty_prem<-processLinesCiti(tyPremierDir)
dfs_doublecash<-processLinesCiti(doubleCashDir)
write.csv(dfs_ty_prem,
paste("Citi/Processed transactions",
"_Citi_ThankYouPremier_WorldEliteMastercard_1065.csv",
sep=""),
row.names = F)
write.csv(dfs_doublecash,
paste("Citi/Processed transactions",
"_Citi_DoubleCash_Mastercard_9945.csv",
sep=""),
row.names = F)
# tyPreferredTail<-"_Citi_ThankYouPreferred_WorldMastercard_4460.csv"
# tyPremierTail<-"_Citi_ThankYouPremier_WorldEliteMastercard_1065.csv"
# doubleCashTail<-"_Citi_DoubleCash_Mastercard_9945.csv"
setwd("C:/HY/Projects/Metrorail_leaflet_shiny_presentation")
